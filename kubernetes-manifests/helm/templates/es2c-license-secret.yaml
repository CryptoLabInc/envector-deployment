{{- /* Creates or updates the license Secret when enabled. Reuses existing Secret if token not provided. */ -}}
{{- if and .Values.es2c.license.enabled .Values.es2c.license.createSecret (not .Values.es2c.license.existingSecret) (not .Values.externalSecrets.enabled) }}
{{- $defaultSecretName := printf "%s-es2c-license" (include "es2-chart.fullname" .) -}}
{{- $secretName := (default $defaultSecretName .Values.es2c.license.secret.name) -}}
{{- $key := (.Values.es2c.license.secret.key | default "token.jwt") -}}
{{- $existing := (lookup "v1" "Secret" .Release.Namespace $secretName) -}}
{{- $hasToken := (not (empty .Values.es2c.license.token)) -}}
{{- if and (not $hasToken) (not $existing) -}}
  {{- fail "es2c.license.token is required on first install when createSecret=true" -}}
{{- end -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  labels:
    app: {{ include "es2-chart.fullname" . }}
    component: es2c
type: Opaque
{{- if $hasToken }}
stringData:
  {{ $key }}: |-
    {{- .Values.es2c.license.token | nindent 4 }}
{{- else }}
  {{- if hasKey $existing.data $key }}
data:
  {{ $key }}: {{ index $existing.data $key | quote }}
  {{- else -}}
  {{- fail (printf "Existing secret %s missing key %s" $secretName $key) -}}
  {{- end }}
{{- end }}
{{- end }}
